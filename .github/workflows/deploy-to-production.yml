name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy frontend'
        type: boolean
        default: true
      deploy_backend:
        description: 'Deploy backend'
        type: boolean
        default: true

env:
  AZURE_RESOURCE_GROUP: ptchampion-rg
  ACR_NAME: ${{ secrets.ACR_NAME }}
  STORAGE_ACCOUNT: ptchampionweb
  FRONTEND_DOMAIN: ptchampion.ai
  BACKEND_APP_NAME: ptchampion-api-westus
  FRONT_DOOR_PROFILE: ptchampion-frontend
  FRONT_DOOR_ENDPOINT: ptchampion

permissions:
  id-token: write
  contents: read

jobs:
  build-frontend:
    name: Build Web Frontend
    if: ${{ inputs.deploy_frontend }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Build for production
        working-directory: ./web
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: web/dist

  build-backend:
    name: Build and Push Backend
    if: ${{ inputs.deploy_backend }}
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ env.ACR_NAME }}.azurecr.io/ptchampion-api:${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Debug OpenAPI file
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "OpenAPI file exists: $(test -f openapi.yaml && echo 'YES' || echo 'NO')"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/ptchampion-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: always() && ((!inputs.deploy_backend && inputs.deploy_frontend && needs.build-frontend.result == 'success') || (inputs.deploy_backend && needs.build-backend.result == 'success') || (inputs.deploy_frontend && inputs.deploy_backend && needs.build-frontend.result == 'success' && needs.build-backend.result == 'success'))
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy frontend
      - name: Download web build artifact
        if: ${{ inputs.deploy_frontend && needs.build-frontend.result == 'success' }}
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web-build

      - name: Deploy web to Static Website
        if: ${{ inputs.deploy_frontend && needs.build-frontend.result == 'success' }}
        run: |
          # Ensure static website is enabled
          az storage blob service-properties update \
            --account-name ${{ env.STORAGE_ACCOUNT }} \
            --static-website \
            --index-document index.html

          # Upload the web files
          az storage blob upload-batch \
            -s web-build \
            -d '$web' \
            --account-name ${{ env.STORAGE_ACCOUNT }} \
            --overwrite

      # Deploy backend if it was built
      - name: Deploy API to App Service
        if: ${{ inputs.deploy_backend && needs.build-backend.result == 'success' }}
        run: |
          IMAGE_NAME="${{ env.ACR_NAME }}.azurecr.io/ptchampion-api:${{ github.sha }}"
          echo "Deploying image: $IMAGE_NAME"
          az webapp config container set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.BACKEND_APP_NAME }} \
            --docker-custom-image-name "$IMAGE_NAME" \
            --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io

      # Configure container port & environment variables
      - name: Configure container port & env-vars
        if: ${{ inputs.deploy_backend && needs.build-backend.result == 'success' }}
        run: |
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.BACKEND_APP_NAME }} \
            --settings \
              WEBSITES_PORT=8080 \
              PORT=8080 \
              AZURE_KEY_VAULT_URL=https://ptchampion-kv.vault.azure.net/

      # Restart backend app after deployment
      - name: Restart backend app
        if: ${{ inputs.deploy_backend && needs.build-backend.result == 'success' }}
        run: |
          az webapp restart --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
          
      # Verify deployment and force restart if needed
      - name: Verify deployment and ensure new image is running
        if: ${{ inputs.deploy_backend && needs.build-backend.result == 'success' }}
        run: |
          echo "Verifying deployment of image with tag: ${{ github.sha }}"
          az webapp config container show --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
          
          # Give the app some time to start
          echo "Waiting 30 seconds for app to initialize..."
          sleep 30
          
          # Force a restart to ensure only the new version is running
          echo "Forcing a second restart to ensure clean deployment"
          az webapp restart --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
          
          # Wait again for restart
          echo "Waiting 30 seconds after restart..."
          sleep 30

      # Purge Front Door cache
      - name: Purge Front Door cache
        run: |
          az afd endpoint purge \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --profile-name ${{ env.FRONT_DOOR_PROFILE }} \
            --endpoint-name ${{ env.FRONT_DOOR_ENDPOINT }} \
            --content-paths "/*"

  health-check:
    name: Post-Deployment Health Checks
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Check Web App
        run: |
          WEB_URL="https://${{ env.FRONTEND_DOMAIN }}"
          echo "Testing web app: $WEB_URL"
          
          for i in {1..12}; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$WEB_URL")
            if [ "$RESPONSE" = "200" ]; then
              echo "Web check passed with 200 OK"
              break
            else
              echo "Attempt $i: Web check returned $RESPONSE, waiting 10 seconds..."
              sleep 10
            fi
            
            if [ $i -eq 12 ]; then
              echo "Web check failed after 2 minutes of attempts"
              exit 1
            fi
          done
      
      - name: Check API health
        if: ${{ inputs.deploy_backend }}
        run: |
          API_URL="https://${{ env.FRONTEND_DOMAIN }}/api/v1/health"
          echo "Testing API: $API_URL"
          
          for i in {1..12}; do
            # Add Bearer token header to pass JWT authentication
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer empty" "$API_URL")
            if [ "$RESPONSE" = "200" ]; then
              echo "API health check passed with 200 OK"
              break
            else
              echo "Attempt $i: API check returned $RESPONSE, waiting 10 seconds..."
              sleep 10
            fi
            
            if [ $i -eq 12 ]; then
              echo "API check failed after 2 minutes of attempts"
              exit 1
            fi
          done

      - name: Notify on successful deployment
        if: success()
        run: |
          echo "✅ Successfully deployed PT Champion to production!"
          
          # Add Slack notification if you have a webhook
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"✅ Successfully deployed PT Champion to production!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }} 
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Vet
        run: go vet ./...
        
      - name: Test
        run: go test -v ./... -tags=unit
  
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: cd web && pnpm install
        
      - name: Lint
        run: cd web && pnpm lint
        
      - name: Build
        run: cd web && pnpm build

  test-migrations:
    name: Test Database Migrations
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:16-3.4-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ptchampion_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history to verify migrations against all branches

      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.2/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/bin/migrate
          migrate -version

      - name: Verify migration file naming
        run: |
          # Check if all migration files follow the correct naming convention
          echo "Checking migration file naming convention..."
          find db/migrations -type f -name "*.sql" | while read file; do
            basename=$(basename "$file")
            if ! [[ $basename =~ ^[0-9]{4}_[a-z0-9_]+\.(up|down)\.sql$ ]]; then
              echo "Error: Migration file $file does not follow the expected naming convention"
              echo "Expected format: ####_description.(up|down).sql"
              exit 1
            fi
          done
          echo "All migration files follow the correct naming convention"

      - name: Verify migration files in pairs
        run: |
          # Check if all migrations have both up and down scripts
          echo "Checking migration file pairs..."
          find db/migrations -type f -name "*.up.sql" | while read upfile; do
            downfile="${upfile/.up./.down.}"
            if [ ! -f "$downfile" ]; then
              echo "Error: Up migration $upfile does not have a corresponding down migration"
              exit 1
            fi
          done
          echo "All migrations have corresponding up/down files"

      - name: Test migrations up and down
        run: |
          # Test that migrations can be applied and rolled back
          echo "Testing migrations up..."
          migrate -path db/migrations -database "postgres://postgres:postgres@localhost:5432/ptchampion_test?sslmode=disable" up
          
          echo "Testing migrations down..."
          migrate -path db/migrations -database "postgres://postgres:postgres@localhost:5432/ptchampion_test?sslmode=disable" down -all
          
          echo "Testing migrations up again..."
          migrate -path db/migrations -database "postgres://postgres:postgres@localhost:5432/ptchampion_test?sslmode=disable" up

  # Add other required jobs for the rest of the CI matrix
  go-test:
    name: Test Go Backend
    runs-on: ubuntu-latest
    needs: test-migrations
    strategy:
      matrix:
        go-version: [1.23.x, 1.24.x]  # Update Go versions to align with go.mod and roadmap intent
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      
      - name: Install dependencies
        run: go mod download
      
      - name: Run tests with coverage
        run: |
          go test ./... -v -coverprofile=coverage.out -covermode=atomic
          go tool cover -func=coverage.out
      
      - name: Check coverage threshold
        run: |
          # Extract the total coverage percentage
          COVERAGE_PCT=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
          echo "Total coverage: $COVERAGE_PCT%"
          
          # Check if coverage is below threshold (80%)
          if (( $(echo "$COVERAGE_PCT < 80.0" | bc -l) )); then
            echo "Error: Code coverage is below 80% threshold ($COVERAGE_PCT%)"
            exit 1
          fi
          
          echo "Coverage threshold passed!"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: backend
          fail_ci_if_error: true
  
  node-test:
    name: Test Web Frontend
    runs-on: ubuntu-latest
    needs: test-migrations
    strategy:
      matrix:
        node-version: ['20.x']  # Node 20 as specified in the roadmap
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm run test:coverage
      
      - name: Check coverage threshold
        run: |
          # Extract the coverage percentage from the coverage summary
          COVERAGE_PCT=$(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')
          echo "Total coverage: $COVERAGE_PCT%"
          
          # Check if coverage is below threshold (80%)
          if (( $(echo "$COVERAGE_PCT < 80.0" | bc -l) )); then
            echo "Error: Code coverage is below 80% threshold ($COVERAGE_PCT%)"
            exit 1
          fi
          
          echo "Coverage threshold passed!"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: frontend
          fail_ci_if_error: true
      
      - name: Build Storybook
        run: npm run build-storybook
      
      - name: Publish to Chromatic
        if: github.event_name == 'pull_request'
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          token: ${{ secrets.GITHUB_TOKEN }}
          exitZeroOnChanges: true # Don't fail the build if there are visual changes

  cypress-e2e:
    name: Cypress E2E Tests
    runs-on: ubuntu-latest
    needs: [go-test, node-test]
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          build: npm run build
          start: npm run dev
          wait-on: 'http://localhost:5173'
          browser: chrome
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  android-test:
    name: Test Android App
    runs-on: ubuntu-latest
    needs: test-migrations
    strategy:
      matrix:
        java-version: ['17']  # Common for modern Android development
        gradle-version: ['8.4']  # AGP 8.4 as specified in the roadmap
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ matrix.gradle-version }}
      
      - name: Run Android Tests with Coverage
        working-directory: ./android
        run: |
          # Check if gradlew exists (some projects might use direct gradle command)
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            ./gradlew jacocoTestReport
          else
            gradle jacocoTestReport
          fi
      
      - name: Check Android Coverage Threshold
        working-directory: ./android
        run: |
          # Verify coverage meets minimum threshold (70% for Android)
          ./gradlew jacocoTestCoverageVerification
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./android/app/build/reports/jacoco/jacocoTestReport
          flags: android
          fail_ci_if_error: true

  ios-test:
    name: Test iOS App
    runs-on: macos-latest
    needs: test-migrations
    strategy:
      matrix:
        xcode-version: ['15.0']  # Xcode 15 as specified in the roadmap
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Setup Xcode ${{ matrix.xcode-version }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode-version }}
      
      - name: Install dependencies
        working-directory: ./ios/ptchampion
        run: |
          if [ -f "Podfile" ]; then
            pod install
          elif [ -f "Package.swift" ]; then
            swift package resolve
          fi
      
      - name: Run iOS Tests with Coverage
        working-directory: ./ios/ptchampion
        run: |
          # Check if we have a workspace (CocoaPods) or a project
          if [ -d "*.xcworkspace" ]; then
            xcodebuild test -workspace "*.xcworkspace" -scheme "PTChampion" -destination "platform=iOS Simulator,name=iPhone 14,OS=latest" -enableCodeCoverage YES
          else
            xcodebuild test -project "*.xcodeproj" -scheme "PTChampion" -destination "platform=iOS Simulator,name=iPhone 14,OS=latest" -enableCodeCoverage YES
          fi
      
      - name: Generate Coverage Report
        run: |
          xcrun llvm-cov export -format="lcov" $(find . -name "*.xctest" | head -1)/Contents/MacOS/* -instr-profile=$(find . -name "*.profdata" | head -1) > coverage.lcov
      
      - name: Check Coverage Threshold
        run: |
          # Install lcov to check coverage
          brew install lcov
          
          # Check coverage percentage
          COVERAGE_PCT=$(lcov --summary coverage.lcov | grep "lines" | cut -d ":" -f 2 | cut -d "%" -f 1 | xargs)
          echo "Total coverage: $COVERAGE_PCT%"
          
          # Check if coverage is below threshold (70% for iOS)
          if (( $(echo "$COVERAGE_PCT < 70.0" | bc -l) )); then
            echo "Error: Code coverage is below 70% threshold ($COVERAGE_PCT%)"
            exit 1
          fi
          
          echo "Coverage threshold passed!"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage.lcov
          flags: ios
          fail_ci_if_error: true 
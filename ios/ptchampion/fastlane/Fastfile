# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

platform :ios do
  desc "Run tests"
  lane :tests do
    run_tests(
      scheme: "ptchampion",
      code_coverage: true,
      result_bundle: true
    )
  end

  desc "Capture snapshots for UI testing and comparison"
  lane :snapshots do
    run_tests(
      scheme: "ptchampionTests",
      only_testing: ["ptchampionTests/ComponentSnapshotTests"],
      output_directory: "snapshots"
    )
    
    # Share snapshots via Slack (uncomment when ready)
    # slack(
    #   message: "New UI snapshots available for review",
    #   success: true,
    #   payload: {
    #     "Snapshot Directory" => "snapshots",
    #     "App Version" => get_version_number
    #   },
    #   default_payloads: [:git_branch, :git_author, :last_git_commit_message]
    # )
  end

  desc "Build and archive the app"
  lane :build do
    build_app(
      scheme: "ptchampion",
      export_method: "development",
      output_directory: "builds"
    )
  end

  desc "Deploy a new beta build to TestFlight"
  lane :beta do
    # Increment build number based on TestFlight
    increment_build_number(
      build_number: latest_testflight_build_number + 1
    )
    
    # Build the app
    build_app(
      scheme: "ptchampion",
      export_method: "app-store"
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
  end
  
  desc "Design token synchronization"
  lane :sync_tokens do
    # Run the token sync script
    sh("cd .. && ./scripts/sync-design-tokens.sh")
    
    # Notify team on success
    slack(
      message: "Design tokens synchronized from web to iOS",
      success: true
    )
  end
  
  desc "Compare UI with web version"
  lane :compare_ui do
    # First, generate fresh snapshots
    snapshots
    
    # Set up paths for comparison
    snapshots_dir = "snapshots"
    web_screenshots_dir = "../../web/screenshots"
    comparison_dir = "ui-comparison"
    
    # Create comparison directory
    sh("mkdir -p #{comparison_dir}")
    
    # For each component in both platforms, generate a comparison image
    # This is a placeholder - you would need a custom script to generate comparisons
    sh("python ../../scripts/generate_ui_comparison.py #{snapshots_dir} #{web_screenshots_dir} #{comparison_dir}")
    
    # Share results
    slack(
      message: "New UI comparison available",
      success: true,
      payload: {
        "Comparison Directory" => comparison_dir
      }
    )
  end
end 
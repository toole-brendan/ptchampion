import SwiftUI

/// This file imports and sets up the generated theme
/// from the design-tokens pipeline. It ensures that the
/// generated theme is properly installed in the app.

// Copy the generated theme file content
// Generated by Style Dictionary
public extension AppTheme {
  enum GeneratedColors {
    public static let cream = Color("Cream")
    public static let creamDark = Color("CreamDark")
    public static let deepOps = Color("DeepOps")
    public static let brassGold = Color("BrassGold")
    public static let armyTan = Color("ArmyTan")
    public static let oliveMist = Color("OliveMist")
    public static let commandBlack = Color("CommandBlack")
    public static let tacticalGray = Color("TacticalGray")
    public static let success = Color("Success")
    public static let warning = Color("Warning")
    public static let error = Color("Error")
    public static let info = Color("Info")
    
    // Add semantic colors that use our generated colors
    public static let primary = deepOps
    public static let secondary = brassGold
    public static let accent = brassGold
    public static let background = cream
    public static let cardBackground = Color.white.opacity(0.8)
    public static let textPrimary = commandBlack
    public static let textSecondary = deepOps
    public static let textTertiary = tacticalGray
  }
  
  enum GeneratedTypography {
    public static let heading1: CGFloat = 40
    public static let heading2: CGFloat = 32
    public static let heading3: CGFloat = 26
    public static let heading4: CGFloat = 22
    public static let body: CGFloat = 16
    public static let small: CGFloat = 14
    public static let tiny: CGFloat = 12

    public static func heading(size: CGFloat) -> Font {
      return Font.custom("BebasNeue-Bold", size: size, relativeTo: .body)
    }
    
    public static func heading1() -> Font {
      return heading(size: heading1)
    }
    
    public static func heading2() -> Font {
      return heading(size: heading2)
    }
    
    public static func heading3() -> Font {
      return heading(size: heading3)
    }
    
    public static func heading4() -> Font {
      return heading(size: heading4)
    }

    public static func body(size: CGFloat = 16) -> Font {
      return Font.custom("Montserrat-Regular", size: size, relativeTo: .body)
    }

    public static func bodyBold(size: CGFloat = 16) -> Font {
      return Font.custom("Montserrat-Bold", size: size, relativeTo: .body)
    }

    public static func bodySemibold(size: CGFloat = 16) -> Font {
      return Font.custom("Montserrat-SemiBold", size: size, relativeTo: .body)
    }

    public static func mono(size: CGFloat = 14) -> Font {
      return Font.custom("RobotoMono-Medium", size: size, relativeTo: .body)
    }
  }
  
  enum GeneratedRadius {
    public static let card: CGFloat = 12
    public static let panel: CGFloat = 16
    public static let button: CGFloat = 8
    public static let input: CGFloat = 8
    public static let small: CGFloat = 4
    public static let medium: CGFloat = 8
    public static let large: CGFloat = 16
  }
  
  enum GeneratedSpacing {
    public static let section: CGFloat = 32
    public static let cardGap: CGFloat = 16
    public static let contentPadding: CGFloat = 16
    public static let itemSpacing: CGFloat = 8
  }
  
  enum GeneratedShadows {
    public static let small = Shadow(
      color: Color.black.opacity(0.1),
      radius: 4,
      x: 0,
      y: 2
    )

    public static let medium = Shadow(
      color: Color.black.opacity(0.15),
      radius: 8,
      x: 0,
      y: 4
    )

    public static let large = Shadow(
      color: Color.black.opacity(0.2),
      radius: 16,
      x: 0,
      y: 8
    )
  }
}

// Helper extension to update view modifiers to use generated theme
extension View {
    public func generatedCardStyle() -> some View {
        self
            .background(AppTheme.GeneratedColors.cardBackground)
            .cornerRadius(AppTheme.GeneratedRadius.card)
            .withShadow(AppTheme.GeneratedShadows.small)
    }
    
    public func generatedPanelStyle() -> some View {
        self
            .background(AppTheme.GeneratedColors.background)
            .cornerRadius(AppTheme.GeneratedRadius.panel)
            .withShadow(AppTheme.GeneratedShadows.medium)
    }
} 
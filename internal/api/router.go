package api

import (
	"net/http"
	"os"
	"path/filepath"
	"strings"

	// Use the new api_handler which embeds the core handlers
	// handlers "ptchampion/internal/api/handlers"

	"ptchampion/internal/config"

	"github.com/go-chi/chi/v5"
	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
	echoMiddleware "github.com/labstack/echo/v4/middleware" // Import echo middleware
)

// FileServer conveniently sets up a http.FileServer handler to serve
// static files from a http.FileSystem.
func FileServer(r chi.Router, path string, root http.FileSystem) {
	if strings.Contains(path, "{") || strings.Contains(path, "*") {
		panic("FileServer does not permit URL parameters.")
	}

	if path != "/" && path[len(path)-1] != '/' {
		r.Get(path, http.RedirectHandler(path+"/", http.StatusMovedPermanently).ServeHTTP)
		path += "/"
	}
	path += "*"

	r.Get(path, func(w http.ResponseWriter, r *http.Request) {
		rctx := chi.RouteContext(r.Context())
		pathPrefix := strings.TrimSuffix(rctx.RoutePattern(), "/*")
		fs := http.StripPrefix(pathPrefix, http.FileServer(root))
		fs.ServeHTTP(w, r)
	})
}

// CustomValidator holds the validator instance
type CustomValidator struct {
	validator *validator.Validate
}

// Validate performs validation on the struct
func (cv *CustomValidator) Validate(i interface{}) error {
	return cv.validator.Struct(i)
}

// NewRouter creates and configures the main application router.
func NewRouter(apiHandler *ApiHandler, cfg *config.Config) http.Handler { // Accept *ApiHandler
	// Use Echo router instead of Chi
	e := echo.New()

	// Setup Validator
	e.Validator = &CustomValidator{validator: validator.New()}

	// Middleware for Echo
	e.Use(echoMiddleware.Logger())
	e.Use(echoMiddleware.Recover())
	e.Use(echoMiddleware.RequestID())
	e.Use(func(next echo.HandlerFunc) echo.HandlerFunc { // Heartbeat equivalent
		return func(c echo.Context) error {
			if c.Request().URL.Path == "/ping" {
				return c.String(http.StatusOK, "pong")
			}
			return next(c)
		}
	})

	// CORS Middleware for Echo
	e.Use(echoMiddleware.CORSWithConfig(echoMiddleware.CORSConfig{
		AllowOriginFunc: func(origin string) (bool, error) {
			return origin == "https://ptchampion.ai" ||
					origin == "https://www.ptchampion.ai" ||
					strings.HasPrefix(origin, "http://localhost:") ||
					origin == cfg.ClientOrigin,
				nil
		},
		AllowMethods:     []string{http.MethodGet, http.MethodPost, http.MethodPut, http.MethodPatch, http.MethodDelete, http.MethodOptions},
		AllowHeaders:     []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept, echo.HeaderAuthorization, "X-CSRF-Token"},
		AllowCredentials: true,
		MaxAge:           300,
	}))

	// Health Check endpoint
	e.GET("/health", func(c echo.Context) error {
		return c.JSON(http.StatusOK, map[string]string{"status": "healthy"})
	})

	// Register handlers generated by oapi-codegen
	// The generated RegisterHandlers function expects an EchoRouter interface,
	// which *echo.Echo satisfies.
	apiGroup := e.Group("/api/v1")
	RegisterHandlers(apiGroup, apiHandler) // Pass the ApiHandler

	// --- Static File Serving for React App (Echo version) ---
	staticFilesDir := "/app/static"
	if _, err := os.Stat(staticFilesDir); os.IsNotExist(err) {
		staticFilesDir = "./client/dist"
	}

	// Serve static files from root and /assets
	e.Static("/", filepath.Join(staticFilesDir, "index.html"))
	e.Static("/assets", filepath.Join(staticFilesDir, "assets"))

	// SPA Handler: For any other GET request not matching API or static files, serve index.html
	e.GET("*", func(c echo.Context) error {
		if !strings.HasPrefix(c.Request().URL.Path, "/api/") &&
			!strings.HasPrefix(c.Request().URL.Path, "/assets/") {
			return c.File(filepath.Join(staticFilesDir, "index.html"))
		}
		// Let Echo handle 404 for API routes or missing assets
		return echo.ErrNotFound
	})

	return e // Return the Echo instance
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate a user and get JWT token
	// (POST /auth/login)
	PostAuthLogin(ctx echo.Context) error
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(ctx echo.Context) error
	// Get exercise history for the current user
	// (GET /exercises)
	GetExercises(ctx echo.Context, params GetExercisesParams) error
	// Log a completed exercise
	// (POST /exercises)
	PostExercises(ctx echo.Context) error
	// Get leaderboard for a specific exercise type
	// (GET /leaderboard/{exerciseType})
	GetLeaderboardExerciseType(ctx echo.Context, exerciseType GetLeaderboardExerciseTypeParamsExerciseType, params GetLeaderboardExerciseTypeParams) error
	// Get leaderboard filtered by proximity to user location
	// (GET /leaderboards/local)
	GetLocalLeaderboard(ctx echo.Context, params GetLocalLeaderboardParams) error
	// Synchronize client data with the server
	// (POST /sync)
	PostSync(ctx echo.Context) error
	// Update current user profile
	// (PATCH /users/me)
	PatchUsersMe(ctx echo.Context) error
	// Get workout history for the current user (tracked sessions)
	// (GET /workouts)
	GetWorkouts(ctx echo.Context, params GetWorkoutsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogin(ctx)
	return err
}

// PostAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRegister(ctx)
	return err
}

// GetExercises converts echo context to params.
func (w *ServerInterfaceWrapper) GetExercises(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExercisesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExercises(ctx, params)
	return err
}

// PostExercises converts echo context to params.
func (w *ServerInterfaceWrapper) PostExercises(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostExercises(ctx)
	return err
}

// GetLeaderboardExerciseType converts echo context to params.
func (w *ServerInterfaceWrapper) GetLeaderboardExerciseType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exerciseType" -------------
	var exerciseType GetLeaderboardExerciseTypeParamsExerciseType

	err = runtime.BindStyledParameterWithOptions("simple", "exerciseType", ctx.Param("exerciseType"), &exerciseType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exerciseType: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLeaderboardExerciseTypeParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLeaderboardExerciseType(ctx, exerciseType, params)
	return err
}

// GetLocalLeaderboard converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalLeaderboard(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocalLeaderboardParams
	// ------------- Required query parameter "exercise_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "exercise_id", ctx.QueryParams(), &params.ExerciseId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exercise_id: %s", err))
	}

	// ------------- Required query parameter "latitude" -------------

	err = runtime.BindQueryParameter("form", true, true, "latitude", ctx.QueryParams(), &params.Latitude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter latitude: %s", err))
	}

	// ------------- Required query parameter "longitude" -------------

	err = runtime.BindQueryParameter("form", true, true, "longitude", ctx.QueryParams(), &params.Longitude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter longitude: %s", err))
	}

	// ------------- Optional query parameter "radius_meters" -------------

	err = runtime.BindQueryParameter("form", true, false, "radius_meters", ctx.QueryParams(), &params.RadiusMeters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter radius_meters: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalLeaderboard(ctx, params)
	return err
}

// PostSync converts echo context to params.
func (w *ServerInterfaceWrapper) PostSync(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSync(ctx)
	return err
}

// PatchUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUsersMe(ctx)
	return err
}

// GetWorkouts converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkouts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkoutsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkouts(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(baseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(baseURL+"/exercises", wrapper.GetExercises)
	router.POST(baseURL+"/exercises", wrapper.PostExercises)
	router.GET(baseURL+"/leaderboard/:exerciseType", wrapper.GetLeaderboardExerciseType)
	router.GET(baseURL+"/leaderboards/local", wrapper.GetLocalLeaderboard)
	router.POST(baseURL+"/sync", wrapper.PostSync)
	router.PATCH(baseURL+"/users/me", wrapper.PatchUsersMe)
	router.GET(baseURL+"/workouts", wrapper.GetWorkouts)

}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workout.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workouts (
    user_id,
    exercise_id,
    exercise_type, -- Consider removing if always joining
    repetitions,
    duration_seconds,
    grade,
    completed_at,
    is_public
    -- created_at is handled by DEFAULT NOW()
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, user_id, exercise_id, exercise_type, repetitions, duration_seconds, form_score, grade, is_public, completed_at, created_at
`

type CreateWorkoutParams struct {
	UserID          int32         `json:"user_id"`
	ExerciseID      int32         `json:"exercise_id"`
	ExerciseType    string        `json:"exercise_type"`
	Repetitions     sql.NullInt32 `json:"repetitions"`
	DurationSeconds sql.NullInt32 `json:"duration_seconds"`
	Grade           int32         `json:"grade"`
	CompletedAt     time.Time     `json:"completed_at"`
	IsPublic        bool          `json:"is_public"`
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout,
		arg.UserID,
		arg.ExerciseID,
		arg.ExerciseType,
		arg.Repetitions,
		arg.DurationSeconds,
		arg.Grade,
		arg.CompletedAt,
		arg.IsPublic,
	)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExerciseID,
		&i.ExerciseType,
		&i.Repetitions,
		&i.DurationSeconds,
		&i.FormScore,
		&i.Grade,
		&i.IsPublic,
		&i.CompletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserWorkouts = `-- name: GetUserWorkouts :many
SELECT 
    w.id, 
    w.user_id, 
    w.exercise_id,
    e.name as exercise_name,  -- Join with exercises table to get the name
    w.repetitions,
    w.duration_seconds,
    w.form_score,
    w.grade,
    w.is_public,
    w.created_at,
    w.completed_at
FROM workouts w
JOIN exercises e ON w.exercise_id = e.id
WHERE w.user_id = $1
ORDER BY w.completed_at DESC
LIMIT $2 OFFSET $3
`

type GetUserWorkoutsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetUserWorkoutsRow struct {
	ID              int32         `json:"id"`
	UserID          int32         `json:"user_id"`
	ExerciseID      int32         `json:"exercise_id"`
	ExerciseName    string        `json:"exercise_name"`
	Repetitions     sql.NullInt32 `json:"repetitions"`
	DurationSeconds sql.NullInt32 `json:"duration_seconds"`
	FormScore       sql.NullInt32 `json:"form_score"`
	Grade           int32         `json:"grade"`
	IsPublic        bool          `json:"is_public"`
	CreatedAt       time.Time     `json:"created_at"`
	CompletedAt     time.Time     `json:"completed_at"`
}

func (q *Queries) GetUserWorkouts(ctx context.Context, arg GetUserWorkoutsParams) ([]GetUserWorkoutsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserWorkouts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserWorkoutsRow{}
	for rows.Next() {
		var i GetUserWorkoutsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ExerciseID,
			&i.ExerciseName,
			&i.Repetitions,
			&i.DurationSeconds,
			&i.FormScore,
			&i.Grade,
			&i.IsPublic,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWorkoutsCount = `-- name: GetUserWorkoutsCount :one
SELECT COUNT(*) FROM workouts WHERE user_id = $1
`

func (q *Queries) GetUserWorkoutsCount(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserWorkoutsCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWorkoutRecordByID = `-- name: GetWorkoutRecordByID :one
SELECT id, user_id, exercise_id, exercise_type, repetitions, duration_seconds, form_score, grade, is_public, completed_at, created_at FROM workouts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWorkoutRecordByID(ctx context.Context, id int32) (Workout, error) {
	row := q.db.QueryRowContext(ctx, getWorkoutRecordByID, id)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExerciseID,
		&i.ExerciseType,
		&i.Repetitions,
		&i.DurationSeconds,
		&i.FormScore,
		&i.Grade,
		&i.IsPublic,
		&i.CompletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateWorkoutVisibility = `-- name: UpdateWorkoutVisibility :exec
UPDATE workouts
SET is_public = $1
WHERE id = $2 AND user_id = $3
`

type UpdateWorkoutVisibilityParams struct {
	IsPublic bool  `json:"is_public"`
	ID       int32 `json:"id"`
	UserID   int32 `json:"user_id"`
}

func (q *Queries) UpdateWorkoutVisibility(ctx context.Context, arg UpdateWorkoutVisibilityParams) error {
	_, err := q.db.ExecContext(ctx, updateWorkoutVisibility, arg.IsPublic, arg.ID, arg.UserID)
	return err
}

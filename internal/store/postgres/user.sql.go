// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const checkUsernameExists = `-- name: CheckUsernameExists :one
SELECT EXISTS (
  SELECT 1 FROM users WHERE username = $1
) AS exists
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  email, 
  password_hash,
  first_name,
  last_name
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, email, password_hash, first_name, last_name, location, latitude, longitude, last_location, tokens_invalidated_at, last_synced_at, created_at, updated_at
`

type CreateUserParams struct {
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	FirstName    sql.NullString `json:"first_name"`
	LastName     sql.NullString `json:"last_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.LastLocation,
		&i.TokensInvalidatedAt,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password_hash, first_name, last_name, location, latitude, longitude, last_location, tokens_invalidated_at, last_synced_at, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.LastLocation,
		&i.TokensInvalidatedAt,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, first_name, last_name, location, latitude, longitude, last_location, tokens_invalidated_at, last_synced_at, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.LastLocation,
		&i.TokensInvalidatedAt,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, first_name, last_name, location, latitude, longitude, last_location, tokens_invalidated_at, last_synced_at, created_at, updated_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.LastLocation,
		&i.TokensInvalidatedAt,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  username = $2,
  email = $3,
  first_name = $4,
  last_name = $5,
  location = $6,
  latitude = $7,
  longitude = $8,
  updated_at = now()
WHERE id = $1
RETURNING id, username, email, password_hash, first_name, last_name, location, latitude, longitude, last_location, tokens_invalidated_at, last_synced_at, created_at, updated_at
`

type UpdateUserParams struct {
	ID        int32          `json:"id"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	Location  sql.NullString `json:"location"`
	Latitude  sql.NullString `json:"latitude"`
	Longitude sql.NullString `json:"longitude"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Location,
		arg.Latitude,
		arg.Longitude,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.LastLocation,
		&i.TokensInvalidatedAt,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserLocation = `-- name: UpdateUserLocation :exec
UPDATE users
SET 
  last_location = ST_SetSRID(ST_MakePoint($2, $3), 4326)::geography, -- $2 = longitude, $3 = latitude
  updated_at = now()
WHERE id = $1
`

type UpdateUserLocationParams struct {
	ID            int32       `json:"id"`
	StMakepoint   interface{} `json:"st_makepoint"`
	StMakepoint_2 interface{} `json:"st_makepoint_2"`
}

func (q *Queries) UpdateUserLocation(ctx context.Context, arg UpdateUserLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateUserLocation, arg.ID, arg.StMakepoint, arg.StMakepoint_2)
	return err
}

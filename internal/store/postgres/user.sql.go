// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const checkUsernameExists = `-- name: CheckUsernameExists :one
SELECT EXISTS (
  SELECT 1 FROM users WHERE username = $1
) AS exists
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  email, 
  password_hash, 
  display_name
)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, password_hash, display_name, location, latitude, longitude, last_location, tokens_invalidated_at, last_synced_at, created_at, updated_at
`

type CreateUserParams struct {
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	DisplayName  sql.NullString `json:"display_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.DisplayName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.LastLocation,
		&i.TokensInvalidatedAt,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password_hash, display_name, location, latitude, longitude, last_location, tokens_invalidated_at, last_synced_at, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.LastLocation,
		&i.TokensInvalidatedAt,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, display_name, location, latitude, longitude, last_location, tokens_invalidated_at, last_synced_at, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.LastLocation,
		&i.TokensInvalidatedAt,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, display_name, location, latitude, longitude, last_location, tokens_invalidated_at, last_synced_at, created_at, updated_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.LastLocation,
		&i.TokensInvalidatedAt,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  username = COALESCE($2, username),
  email = COALESCE($3, email),
  display_name = COALESCE($4, display_name),
  location = COALESCE($5, location),
  latitude = COALESCE($6, latitude),
  longitude = COALESCE($7, longitude),
  updated_at = now()
WHERE id = $1
RETURNING id, username, email, password_hash, display_name, location, latitude, longitude, last_location, tokens_invalidated_at, last_synced_at, created_at, updated_at
`

type UpdateUserParams struct {
	ID          int32          `json:"id"`
	Username    string         `json:"username"`
	Email       string         `json:"email"`
	DisplayName sql.NullString `json:"display_name"`
	Location    sql.NullString `json:"location"`
	Latitude    sql.NullString `json:"latitude"`
	Longitude   sql.NullString `json:"longitude"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.DisplayName,
		arg.Location,
		arg.Latitude,
		arg.Longitude,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.LastLocation,
		&i.TokensInvalidatedAt,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserLocation = `-- name: UpdateUserLocation :exec
UPDATE users
SET 
  last_location = ST_SetSRID(ST_MakePoint($2, $3), 4326)::geography, -- $2 = longitude, $3 = latitude
  updated_at = now()
WHERE id = $1
`

type UpdateUserLocationParams struct {
	ID            int32       `json:"id"`
	StMakepoint   interface{} `json:"st_makepoint"`
	StMakepoint_2 interface{} `json:"st_makepoint_2"`
}

func (q *Queries) UpdateUserLocation(ctx context.Context, arg UpdateUserLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateUserLocation, arg.ID, arg.StMakepoint, arg.StMakepoint_2)
	return err
}

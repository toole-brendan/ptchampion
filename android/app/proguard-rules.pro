# Add project specific ProGuard rules here.
# By default, the flags in this file are applied to warnings from Android Gradle plugin R8.
# You can find general rules samples on https://www.guardsquare.com/proguard
#
# Add general rules for Kotlin:
# -keep class kotlin.Metadata { *; }
# -dontwarn kotlin.**
# -keep class kotlinx.coroutines.** { *; }

# --- Hilt --- 
# Keep entry points reachable 
-keep class * implements dagger.hilt.EntryPoint { *; }
-keep class * implements dagger.hilt.InstallIn { *; }
# Keep Hilt generated code
-keep class dagger.hilt.internal.** { *; }
-keep class com.example.ptchampion.**_HiltModules.** { *; }
-keep class * extends androidx.lifecycle.ViewModel { <init>(...); }
-keepclassmembers class * { @com.google.errorprone.annotations.Keep *; }

# --- Retrofit / OkHttp --- 
-dontwarn okhttp3.**
-dontwarn okio.**
-dontwarn retrofit2.**
# Keep interfaces used with Retrofit
-keep interface * { @retrofit2.http.* <methods>; }
# Keep callback classes used with Retrofit
-keep class retrofit2.Callback
-keep class * implements retrofit2.Callback { *; }

# --- Moshi --- 
-dontwarn com.squareup.moshi.**
# Keep models used by Moshi (adjust package if needed)
-keep class com.example.ptchampion.models.** { *; }
-keep class com.example.ptchampion.data.network.model.** { *; } # Keep potentially different model package
-keep @com.squareup.moshi.JsonQualifier @interface *
-keepclasseswithmembers class * { @com.squareup.moshi.FromJson *; }
-keepclasseswithmembers class * { @com.squareup.moshi.ToJson *; }
# Keep KotlinJsonAdapterFactory if used reflection (though codegen is preferred)
# -keep class com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory { *; }
# Keep classes generated by Moshi codegen (if using @JsonClass)
-keep class **JsonAdapter { *; }

# --- Kotlinx Serialization --- 
-keep class kotlinx.serialization.** { *; }
-keepclassmembers class ** { @kotlinx.serialization.Serializable *; }
-keepclassmembers class * { @kotlinx.serialization.* *; }
-keep enum kotlinx.serialization.encoding.** { *; }

# --- Coroutines --- 
-keepnames class kotlinx.coroutines.internal.MainDispatcherFactory {}
-keepnames class kotlinx.coroutines.CoroutineExceptionHandler {}
-keepnames class kotlinx.coroutines.android.** { *; }
-keepnames class kotlinx.coroutines.flow.** { *; }

# --- Other specific classes to keep ---
# Add classes here that R8 might remove but are needed, e.g., used via reflection.
# -keep class com.example.myclass

# You might need to add specific rules for the generated org.openapitools code
# depending on its structure and potential reflection usage.
# Check the generated code and test thoroughly.
# Example (if models are in a specific package):
# -keep class org.openapitools.client.models.** { *; }

# Keep rules for javax.lang.model needed by some libraries (e.g., AutoValue/JavaPoet)
-dontwarn javax.lang.model.**
-keep class javax.lang.model.** { *; }

# Keep rules for TensorFlow Lite GPU Delegate
-keep class org.tensorflow.lite.gpu.** { *; }
# Add standard TFLite GPU delegate rules
-keep interface org.tensorflow.lite.Delegate
-keep class org.tensorflow.lite.DelegateFactory
-keep class org.tensorflow.lite.gpu.GpuDelegate implements org.tensorflow.lite.Delegate
-keep class org.tensorflow.lite.gpu.GpuDelegateFactory implements org.tensorflow.lite.DelegateFactory
-keep class org.tensorflow.lite.gpu.CompatibilityList

# Specifically keep inner classes mentioned in R8 errors
-keep class org.tensorflow.lite.gpu.GpuDelegateFactory$Options { *; }
-keep class org.tensorflow.lite.gpu.GpuDelegateFactory$Options$* { *; }
-keep class org.tensorflow.lite.gpu.GpuDelegateFactory$Options$GpuBackend { *; }
-keep class org.tensorflow.lite.gpu.GpuDelegate$* { *; }
-keep class org.tensorflow.lite.gpu.GpuDelegate$Options { *; } 
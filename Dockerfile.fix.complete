# Use the official Golang image as a build stage
FROM golang:1.24.1-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies
RUN go mod download

# Install git (required for go install to fetch repositories)
RUN apk add --no-cache git

# Copy the source code
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -o server_binary ./cmd/server

# Use a minimal base image
FROM alpine:latest

# Install PostgreSQL client for migrations and health checks
RUN apk --no-cache add ca-certificates postgresql-client netcat-openbsd

WORKDIR /app

# Copy the server binary from the builder stage
COPY --from=builder /app/server_binary .

# Copy the entrypoint script to run migrations before starting the server
COPY scripts/entrypoint.sh .
RUN chmod +x /app/entrypoint.sh

# Create directory for SQL fixes
RUN mkdir -p /app/sql/fixes

# Copy SQL and script files
COPY fix_db_schema_all_columns.sql /app/sql/fixes/all_columns_fix.sql
COPY fix_db_script.sh /app/sql/fixes/apply_fixes.sh
RUN chmod +x /app/sql/fixes/apply_fixes.sh

# Modify entrypoint.sh to run our fixes
RUN echo '\n\
# Apply complete database schema fixes with maximal effort to ensure they work\n\
echo "---------------------------------------------"\n\
echo "ðŸ”§ Applying complete database schema fixes..."\n\
echo "These fixes will ensure all required columns exist in the users table:"\n\
echo "- password_hash (renamed from password)"\n\
echo "- display_name"\n\
echo "- profile_picture_url"\n\
echo "- location"\n\
echo "- latitude"\n\
echo "- longitude"\n\
echo "---------------------------------------------"\n\
/app/sql/fixes/apply_fixes.sh\n\
echo "---------------------------------------------"\n\
' >> /app/entrypoint.sh

ENV NODE_ENV=production

EXPOSE 8080

# Use the entrypoint script to run migrations, then start the server
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["./server_binary"] 
//
// LeaderboardAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LeaderboardAPI {

    /**
     * enum for parameter exerciseType
     */
    public enum ExerciseType_leaderboardExerciseTypeGet: String, CaseIterable {
        case pushup = "pushup"
        case pullup = "pullup"
        case situp = "situp"
        case run = "run"
    }

    /**
     Get leaderboard for a specific exercise type
     
     - parameter exerciseType: (path) Type of exercise for the leaderboard 
     - parameter limit: (query) Maximum number of leaderboard entries to return (optional, default to 20)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func leaderboardExerciseTypeGet(exerciseType: ExerciseType_leaderboardExerciseTypeGet, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [LeaderboardResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return leaderboardExerciseTypeGetWithRequestBuilder(exerciseType: exerciseType, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get leaderboard for a specific exercise type
     - GET /leaderboard/{exerciseType}
     - parameter exerciseType: (path) Type of exercise for the leaderboard 
     - parameter limit: (query) Maximum number of leaderboard entries to return (optional, default to 20)
     - returns: RequestBuilder<[LeaderboardResponseInner]> 
     */
    open class func leaderboardExerciseTypeGetWithRequestBuilder(exerciseType: ExerciseType_leaderboardExerciseTypeGet, limit: Int? = nil) -> RequestBuilder<[LeaderboardResponseInner]> {
        var localVariablePath = "/leaderboard/{exerciseType}"
        let exerciseTypePreEscape = "\(exerciseType.rawValue)"
        let exerciseTypePostEscape = exerciseTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exerciseType}", with: exerciseTypePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LeaderboardResponseInner]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}

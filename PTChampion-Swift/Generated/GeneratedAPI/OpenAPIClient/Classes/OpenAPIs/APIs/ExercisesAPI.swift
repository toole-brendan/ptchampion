//
// ExercisesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ExercisesAPI {

    /**
     Get exercise history for the current user
     
     - parameter page: (query) Page number for pagination (optional, default to 1)
     - parameter pageSize: (query) Number of items per page (optional, default to 20)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func exercisesGet(page: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedExerciseHistoryResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return exercisesGetWithRequestBuilder(page: page, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get exercise history for the current user
     - GET /exercises
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter page: (query) Page number for pagination (optional, default to 1)
     - parameter pageSize: (query) Number of items per page (optional, default to 20)
     - returns: RequestBuilder<PaginatedExerciseHistoryResponse> 
     */
    open class func exercisesGetWithRequestBuilder(page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedExerciseHistoryResponse> {
        let localVariablePath = "/exercises"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedExerciseHistoryResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Log a completed exercise
     
     - parameter logExerciseRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func exercisesPost(logExerciseRequest: LogExerciseRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LogExerciseResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return exercisesPostWithRequestBuilder(logExerciseRequest: logExerciseRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Log a completed exercise
     - POST /exercises
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter logExerciseRequest: (body)  (optional)
     - returns: RequestBuilder<LogExerciseResponse> 
     */
    open class func exercisesPostWithRequestBuilder(logExerciseRequest: LogExerciseRequest? = nil) -> RequestBuilder<LogExerciseResponse> {
        let localVariablePath = "/exercises"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: logExerciseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LogExerciseResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

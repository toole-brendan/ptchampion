//
// UserExercise.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Details of a completed or tracked exercise */
public struct UserExercise: Codable, JSONEncodable, Hashable {

    public enum SyncStatus: String, Codable, CaseIterable {
        case synced = "synced"
        case pending = "pending"
        case conflict = "conflict"
    }
    public static let formScoreRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    public static let gradeRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    public var id: Int
    public var userId: Int
    public var exerciseId: Int
    public var repetitions: Int?
    public var formScore: Int?
    public var timeInSeconds: Int?
    public var grade: Int?
    public var completed: Bool
    public var metadata: String?
    public var deviceId: String?
    public var syncStatus: SyncStatus?
    public var createdAt: String?
    public var updatedAt: String?

    public init(id: Int, userId: Int, exerciseId: Int, repetitions: Int?, formScore: Int?, timeInSeconds: Int?, grade: Int?, completed: Bool, metadata: String?, deviceId: String?, syncStatus: SyncStatus?, createdAt: String?, updatedAt: String?) {
        self.id = id
        self.userId = userId
        self.exerciseId = exerciseId
        self.repetitions = repetitions
        self.formScore = formScore
        self.timeInSeconds = timeInSeconds
        self.grade = grade
        self.completed = completed
        self.metadata = metadata
        self.deviceId = deviceId
        self.syncStatus = syncStatus
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userId
        case exerciseId
        case repetitions
        case formScore
        case timeInSeconds
        case grade
        case completed
        case metadata
        case deviceId
        case syncStatus
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(userId, forKey: .userId)
        try container.encode(exerciseId, forKey: .exerciseId)
        try container.encode(repetitions, forKey: .repetitions)
        try container.encode(formScore, forKey: .formScore)
        try container.encode(timeInSeconds, forKey: .timeInSeconds)
        try container.encode(grade, forKey: .grade)
        try container.encode(completed, forKey: .completed)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(deviceId, forKey: .deviceId)
        try container.encode(syncStatus, forKey: .syncStatus)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension UserExercise: Identifiable {}

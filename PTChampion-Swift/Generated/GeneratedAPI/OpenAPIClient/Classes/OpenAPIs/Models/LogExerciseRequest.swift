//
// LogExerciseRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Exercise data to log */
public struct LogExerciseRequest: Codable, JSONEncodable, Hashable {

    public static let exerciseIdRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: true, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let repsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let durationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let distanceRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var exerciseId: Int
    public var reps: Int?
    public var duration: Int?
    public var distance: Int?
    public var notes: String?

    public init(exerciseId: Int, reps: Int? = nil, duration: Int? = nil, distance: Int? = nil, notes: String? = nil) {
        self.exerciseId = exerciseId
        self.reps = reps
        self.duration = duration
        self.distance = distance
        self.notes = notes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case exerciseId = "exercise_id"
        case reps
        case duration
        case distance
        case notes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(exerciseId, forKey: .exerciseId)
        try container.encodeIfPresent(reps, forKey: .reps)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(distance, forKey: .distance)
        try container.encodeIfPresent(notes, forKey: .notes)
    }
}


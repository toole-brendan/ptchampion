//
// InsertUserExercise.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data for recording a new user exercise attempt */
public struct InsertUserExercise: Codable, JSONEncodable, Hashable {

    public static let userIdRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let exerciseIdRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let repetitionsRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let formScoreRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let timeInSecondsRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let gradeRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public var userId: Int
    public var exerciseId: Int
    public var repetitions: Int?
    public var formScore: Int?
    public var timeInSeconds: Int?
    public var grade: Int?
    public var completed: Bool?
    public var metadata: String?
    public var deviceId: String?
    public var syncStatus: String?

    public init(userId: Int, exerciseId: Int, repetitions: Int? = nil, formScore: Int? = nil, timeInSeconds: Int? = nil, grade: Int? = nil, completed: Bool? = nil, metadata: String? = nil, deviceId: String? = nil, syncStatus: String? = nil) {
        self.userId = userId
        self.exerciseId = exerciseId
        self.repetitions = repetitions
        self.formScore = formScore
        self.timeInSeconds = timeInSeconds
        self.grade = grade
        self.completed = completed
        self.metadata = metadata
        self.deviceId = deviceId
        self.syncStatus = syncStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId
        case exerciseId
        case repetitions
        case formScore
        case timeInSeconds
        case grade
        case completed
        case metadata
        case deviceId
        case syncStatus
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userId, forKey: .userId)
        try container.encode(exerciseId, forKey: .exerciseId)
        try container.encodeIfPresent(repetitions, forKey: .repetitions)
        try container.encodeIfPresent(formScore, forKey: .formScore)
        try container.encodeIfPresent(timeInSeconds, forKey: .timeInSeconds)
        try container.encodeIfPresent(grade, forKey: .grade)
        try container.encodeIfPresent(completed, forKey: .completed)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(syncStatus, forKey: .syncStatus)
    }
}


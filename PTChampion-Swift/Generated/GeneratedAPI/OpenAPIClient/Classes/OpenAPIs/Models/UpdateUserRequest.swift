//
// UpdateUserRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Fields to update in user profile */
public struct UpdateUserRequest: Codable, JSONEncodable, Hashable {

    public static let usernameRule = StringRule(minLength: 3, maxLength: 30, pattern: nil)
    public static let displayNameRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let locationRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public var username: String?
    public var displayName: String?
    public var profilePictureUrl: String?
    public var location: String?
    public var latitude: Double?
    public var longitude: Double?

    public init(username: String? = nil, displayName: String? = nil, profilePictureUrl: String? = nil, location: String? = nil, latitude: Double? = nil, longitude: Double? = nil) {
        self.username = username
        self.displayName = displayName
        self.profilePictureUrl = profilePictureUrl
        self.location = location
        self.latitude = latitude
        self.longitude = longitude
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case username
        case displayName = "display_name"
        case profilePictureUrl = "profile_picture_url"
        case location
        case latitude
        case longitude
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(profilePictureUrl, forKey: .profilePictureUrl)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
    }
}


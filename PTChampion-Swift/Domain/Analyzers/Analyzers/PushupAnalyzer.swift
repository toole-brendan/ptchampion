import Foundation\nimport MediaPipeTasksVision\nimport simd\n\nclass PushupAnalyzer: ExerciseAnalyzer {\n\n    private var repCount: Int = 0\n    private var currentState: ExerciseState = .idle\n    private var feedback: [String] = []\n    private var formScore: Double = 100.0 // Start with a perfect score\n    private var minVisibility: Float = 0.5\n\n    // Thresholds (can be adjusted)\n    private let elbowAngleDownThreshold: Double = 95.0  // Max angle for elbow to be considered 'down'\n    private let elbowAngleUpThreshold: Double = 150.0 // Min angle for elbow to be considered 'up'\n    private let hipAlignmentThreshold: Double = 20.0 // Max acceptable angle deviation for hips\n    private let formDeductionDepth: Double = 5.0     // Points deducted for insufficient depth\n    private let formDeductionHip: Double = 3.0       // Points deducted for poor hip alignment\n\n    init() {}\n\n    func analyze(poseLandmarkerResult: PoseLandmarkerResult, imageSize: CGSize) -> AnalysisResult {\n        feedback = [] // Reset feedback for each frame\n        guard let landmarks = poseLandmarkerResult.landmarks.first else {\n            // No landmarks detected\n            currentState = .invalid\n            feedback.append(\"No person detected or landmarks unclear.\")\n            return AnalysisResult(repCount: repCount, feedback: feedback, state: currentState, confidence: 0.0, formScore: formScore)\n        }\n\n        let confidence = landmarks.compactMap { $0.visibility }.reduce(0, +) / Float(landmarks.count)\n\n        // Get key landmarks\n        let leftShoulder = landmarks[PoseLandmark.leftShoulder.rawValue]\n        let rightShoulder = landmarks[PoseLandmark.rightShoulder.rawValue]\n        let leftElbow = landmarks[PoseLandmark.leftElbow.rawValue]\n        let rightElbow = landmarks[PoseLandmark.rightElbow.rawValue]\n        let leftWrist = landmarks[PoseLandmark.leftWrist.rawValue]\n        let rightWrist = landmarks[PoseLandmark.rightWrist.rawValue]\n        let leftHip = landmarks[PoseLandmark.leftHip.rawValue]\n        let rightHip = landmarks[PoseLandmark.rightHip.rawValue]\n        let leftKnee = landmarks[PoseLandmark.leftKnee.rawValue] // For hip alignment\n        let rightKnee = landmarks[PoseLandmark.rightKnee.rawValue] // For hip alignment\n\n        // Calculate angles\n        let leftElbowAngle = AngleCalculator.calculateAngle(leftShoulder, leftElbow, leftWrist, minVisibility: minVisibility)\n        let rightElbowAngle = AngleCalculator.calculateAngle(rightShoulder, rightElbow, rightWrist, minVisibility: minVisibility)\n\n        // Use the average or the more reliable angle if one side is obscured\n        let elbowAngle: Double?\n        if let left = leftElbowAngle, let right = rightElbowAngle {\n            elbowAngle = (left + right) / 2.0\n        } else {\n            elbowAngle = leftElbowAngle ?? rightElbowAngle\n        }\n\n        // Hip alignment check (angle between shoulder-hip-knee)\n        let leftHipAngle = AngleCalculator.calculateAngle(leftShoulder, leftHip, leftKnee, minVisibility: minVisibility)\n        let rightHipAngle = AngleCalculator.calculateAngle(rightShoulder, rightHip, rightKnee, minVisibility: minVisibility)\n        let hipAngle: Double?\n        if let left = leftHipAngle, let right = rightHipAngle {\n            hipAngle = (left + right) / 2.0\n        } else {\n            hipAngle = leftHipAngle ?? rightHipAngle\n        }\n\n        // Check for hip alignment issues\n        if let hipAngle = hipAngle, abs(hipAngle - 180.0) > hipAlignmentThreshold {\n             feedback.append(\"Keep body straight!\")\n             // Deduct form score slightly for alignment issues during the rep\n             if currentState == .down || currentState == .up {\n                 formScore = max(0, formScore - formDeductionHip * 0.1) // Small deduction per frame\n             }\n         }\n\n        // State machine logic\n        guard let currentElbowAngle = elbowAngle else {\n            // Can't determine state without elbow angle\n            currentState = .invalid\n            feedback.append(\"Cannot see elbows clearly.\")\n            return AnalysisResult(repCount: repCount, feedback: feedback, state: currentState, confidence: confidence, formScore: formScore)\n        }\n\n        switch currentState {\n        case .idle, .finished:\n            // Transition to starting if elbows are extended\n            if currentElbowAngle > elbowAngleUpThreshold {\n                currentState = .starting\n            }\n        case .starting:\n            // Transition to down if elbows start bending\n            if currentElbowAngle < elbowAngleDownThreshold + 10 { // Add buffer to avoid immediate switch back\n                currentState = .down\n            }\n        case .down:\n            // Check for insufficient depth\n            if currentElbowAngle > elbowAngleDownThreshold {\n                 feedback.append(\"Go lower!\")\n                 formScore = max(0, formScore - formDeductionDepth * 0.1) // Small deduction per frame\n            }\n            // Transition to up if elbows start extending\n            if currentElbowAngle > elbowAngleUpThreshold {\n                currentState = .up\n                // Evaluate form at the bottom of the rep\n                if currentElbowAngle <= elbowAngleDownThreshold {\n                    // Good depth\n                } else {\n                     // Apply full deduction for bad depth on this rep\n                     formScore = max(0, formScore - formDeductionDepth)\n                }\n                 if let hipAngle = hipAngle, abs(hipAngle - 180.0) > hipAlignmentThreshold {\n                     // Apply full deduction for bad alignment on this rep\n                     formScore = max(0, formScore - formDeductionHip)\n                 }\n            }\n        case .up:\n            // Transition back to starting when fully up, increment count\n            if currentElbowAngle > elbowAngleUpThreshold {\n                repCount += 1\n                currentState = .starting\n                 feedback.append(\"Rep \(repCount) counted!\") // Optional confirmation\n            }\n        case .invalid:\n            // Try to recover if landmarks become visible and extended\n            if currentElbowAngle > elbowAngleUpThreshold {\n                 currentState = .starting\n            } else if currentElbowAngle < elbowAngleDownThreshold {\n                 currentState = .down // Attempt to resume if in down position\n            }\n        }\n\n        return AnalysisResult(repCount: repCount, feedback: feedback, state: currentState, confidence: confidence, formScore: formScore)\n    }\n\n    func reset() {\n        repCount = 0\n        currentState = .idle\n        feedback = []\n        formScore = 100.0\n    }\n\n    func start() {\n        if currentState == .idle || currentState == .finished {\n           reset() // Ensure clean state on start\n           // Don't immediately go to starting, wait for analysis to confirm pose\n        }\n    }\n\n    func stop() {\n        currentState = .finished\n    }\n}\n 
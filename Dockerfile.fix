# Use the official Golang image as a build stage
FROM golang:1.24.1-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies
RUN go mod download

# Install git (required for go install to fetch repositories)
RUN apk add --no-cache git

# Copy the source code
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -o server_binary ./cmd/server

# Use a minimal base image
FROM alpine:latest

# Install PostgreSQL client for migrations and health checks, and netcat for health check endpoint
RUN apk --no-cache add ca-certificates postgresql-client netcat-openbsd

WORKDIR /app

# Copy the server binary from the builder stage
COPY --from=builder /app/server_binary .

# Copy the entrypoint script to run migrations before starting the server
COPY scripts/entrypoint.sh .
RUN chmod +x /app/entrypoint.sh

# Create directory for SQL fixes
RUN mkdir -p /app/sql/fixes

# Add our custom SQL fix
RUN echo '-- 1. Rename password column to password_hash if it exists\n\
DO $$\n\
BEGIN\n\
    IF EXISTS (SELECT 1 FROM information_schema.columns \n\
               WHERE table_name = '\''users'\'' AND column_name = '\''password'\'') THEN\n\
        ALTER TABLE users RENAME COLUMN password TO password_hash;\n\
    END IF;\n\
END $$;\n\
\n\
-- 2. Add display_name column if it doesn'\''t exist\n\
DO $$\n\
BEGIN\n\
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns \n\
                  WHERE table_name = '\''users'\'' AND column_name = '\''display_name'\'') THEN\n\
        ALTER TABLE users ADD COLUMN display_name VARCHAR(255);\n\
    END IF;\n\
END $$;' > /app/sql/fixes/schema_fixes.sql

# Modify entrypoint.sh to run our fixes
RUN echo '\n\
# Apply the complete schema fixes\n\
echo "Applying complete schema fixes from /app/sql/fixes/schema_fixes.sql..."\n\
PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -v ON_ERROR_STOP=0 -f /app/sql/fixes/schema_fixes.sql\n\
' >> /app/entrypoint.sh

ENV NODE_ENV=production

EXPOSE 8080

# Use the entrypoint script to run migrations, then start the server
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["./server_binary"] 